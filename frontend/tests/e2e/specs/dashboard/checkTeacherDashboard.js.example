describe('TeacherDashboard', () => {

    beforeEach( () => {

        cy.request('http://localhost:8080/auth/demo/teacher')
            .as('loginResponse')
            .then((response) => {
                Cypress.env('token', response.body.token);
                return response;
            });

        cy.updateDemoCourseAcademicTerm('2018/2019');

        cy.createCourseExecutionOnDemoCourse('2021/2022');

        cy.createCourseExecutionOnDemoCourse('2022/2023');

        cy.changeDemoTeacherCourseExecutionMatchingAcademicTerm('2022/2023');

        cy.request('http://localhost:8080/auth/demo/teacher')
            .as('loginResponse')
            .then((response) => {
                Cypress.env('token', response.body.token);
                return response;
            });

    });

    afterEach( () => {

        cy.deleteStats();
        cy.changeDemoTeacherCourseExecutionMatchingAcademicTerm('2018/2019');
        cy.deleteCourseExecutions('2022/2023', '2021/2022')
        cy.updateDemoCourseAcademicTerm('2019/2020');
    });

    it('teacher access dashboard', () => {

        cy.intercept('GET', '**/teachers/dashboards/executions/*').as(
            'getDashboard'
        );

        cy.demoTeacherLogin();

        cy.get('[data-cy="dashboardMenuButton"]').click();
        cy.wait('@getDashboard');

        cy.contains('Logout').click();

        cy.addQuestionStats(300, 150, 400, 1);

        cy.addQuestionStats(250, 150, 500, 2);

        cy.addQuestionStats(400, 300, 600, 3);

        cy.addQuizStats(150, 75, 200, 1);

        cy.addQuizStats(200, 100, 300, 2);

        cy.addQuizStats(350, 200, 400, 3);

        cy.addStudentStats(250, 0, 290, 2);

        cy.addStudentStats(315, 0, 320, 3);

        cy.demoTeacherLogin();

        cy.get('[data-cy="dashboardMenuButton"]').click();
        cy.wait(3000);

        cy.get('[data-cy=num-questions-available]')
            .should('have.text', '600')

        cy.get('[data-cy=answered-question-unique]')
            .should('have.text', '400')

        cy.get('[data-cy=average-question-unique]')
            .should('have.text', '300')

        // cy.get('[data-cy=number-quizzes]')
        //     .should('have.text', '400')
        //
        // cy.get('[data-cy=average-quizzes-unique]')
        //     .should('have.text', '200')
        //
        // cy.get('[data-cy=solved-quizzes-unique]')
        //     .should('have.text', '350')
        //
        cy.get('[data-cy=number-students]')
            .should('have.text', '320')
        //
        cy.get('[data-cy=students-solved-at-least-3-quizzes]')
            .should('have.text', '315')
        //

        // TAKE SCREENSHOT
        // cy.get('[data-cy=Bar-Chart]').first().scrollIntoView().wait(5000).screenshot('./base-screenshots/expected/questionBarChart')
        cy.get('[data-cy=Student-Chart]').first().scrollIntoView().wait(5000).screenshot('./base-screenshots/result/studentBarChart')
        // cy.get('[data-cy=Bar-Chart]').first().scrollIntoView().wait(5000).screenshot('./base-screenshots/result/questionBarChart')
        

        // PNGJS lets me load the picture from disk
        const PNG = require('pngjs').PNG;
        // pixelmatch library will handle comparison
        const pixelmatch = require('pixelmatch');

        // cy.readFile(
        //     './tests/e2e/specs/dashboard/base-screenshots/questionBarChart.png', 'base64'
        // ).then(baseImage => {
        //     cy.readFile(
        //         './tests/e2e/screenshots/dashboard/checkTeacherDashboard.js/base-screenshots/result/questionBarChart.png', 'base64'
        //     ).then(chartImage => {
        //         // load both pictures
        //         const img1 = PNG.sync.read(Buffer.from(baseImage, 'base64'));
        //         const img2 = PNG.sync.read(Buffer.from(chartImage, 'base64'));

        //         const { width, height } = img1;
        //         const diff = new PNG({ width, height });

        //         // calling pixelmatch return how many pixels are different
        //         const numDiffPixels = pixelmatch(img1.data, img2.data, diff.data, width, height, { threshold: 0.1 });

        //         // calculating a percent diff
        //         const diffPercent = (numDiffPixels / (width * height) * 100);

        //         cy.task('log', `Found a ${diffPercent.toFixed(2)}% pixel difference`);
        //         cy.log(`Found a ${diffPercent.toFixed(2)}% pixel difference`);
        //         //cy.writeFile('diff.png', PNG.sync.write(diff));

        //         expect(diffPercent).to.be.below(40);
        //     });
        // });

        cy.contains('Logout').click();
    });

});
